---
layout: homework
title: CSCI-UA.0480 - Homework #8
---
<div class="panel panel-default">
	<div class="panel-heading">Homework #6</div>
	<div class="panel-body" markdown="block">

# AJAX

## Overview

### Goals / Topics Covered

You'll be using the following concepts:

* XMLHttpRequest
* sending back json from Express

### Description

Building on the concept of express applications, you will be creating a "single page application" that allows users to filter restaurants from a list and add new ones. The application will use AJAX POSTs and GETs instead of regular form submissions

You will:

1. Consolidate the forms for filtering restaurants and adding restaurants so that they appear on the same page
2. Add routes to create an API for retrieving restaurants and adding new ones
3. Use JavaScript to trigger background requests to the API from the form submit buttons

Use the following resources as reference:

1. [Slides on AJAX Part 1](../slides/20/ajax.html)
2. [Slides on AJAX Part 2](../slides/21/ajax-express.html)
3. [AJAX POST (from Part 2)](../slides/21/ajax-express.html#/47)

### Submission Process

You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub

* __Push__ your changes to the homework repository on GitHub.
* Commits later than that date will be handled on a case-by-case basis.

### Make at Least 3 Commits

* Commit multiple times throughout your development process.
* Make at least 3 separate commits

### Code Structure:

__You should first create an express application that will be served on port 3000__

The structure of your directory should eventually look like this
```
single-page-app
    /node_modules
    package.json
    .gitignore
    /public
        /stylesheets
            style.css
    /routes
        places.js
    /views
        index.html
    server.js

```

* __server.js__:  this is where the express app is initialized
* __/routes/places.js__: this is where all your API routes to fetch and create restaurants should exist (this will need to be "used" in the __server.js__ file)

### Important:
* You are not allowed to use the __body-parser__ module as all our requests will be using the __application/x-www-form-urlencoded__ header

### Fetching and Filtering:

1. You will need to create a route `GET /places` which returns all the restaurants existing in your database
2. This route should support query string parameters which give the user the ability to specify the `location`, `cuisine`, or both.
3. It should return JSON objects

For example, `GET /places?location=West%20Village&cuisine=Turkish`
should return:

```
[
  {
    "name":"Istanbul Grill",
    "cuisine":"Turkish",
    "location":"West Village"
  }
]
```

![ajax filter](https://raw.githubusercontent.com/nyu-csci-ua-0480-003-fall-2017/homework08-restaurants/master/fall2017-hw8/hw-8-filter.gif?token=AGBgxohwVwl8b1O65ZSDPekYzQ85YC9Jks5aGF0bwA%3D%3D)

### Adding new restaurants

1. You will need to create another route `POST /places` which will create a new restaurant based on the request's body
    * it should return JSON objects
    * it should send back the object inserted, if successful
    * otherwise, send back an object with a key called error... with a value containing an error message
2. The normal behavior of forms will need to be modified so that when the add button is pressed:
    * the regular form button press event isn't triggered (use `preventDefault`)
    * ... and instead, the values in the add form are retrieved
    * a background request is made to the url
        * remember to set content type: `req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");`
        * in <code>res.send</code>, make sure to add the form data as name value pairs: <code>"name1=value1&name2=value2&nameN=valueN"</code>
    * when a response is retrieved, repopulate the table so that the new restaurant is added
    * __if there was a filter set before adding, then clear the filter to show all restaurants, including the newly added one__

For example,

![ajax add](https://raw.githubusercontent.com/nyu-csci-ua-0480-003-fall-2017/homework08-restaurants/master/fall2017-hw8/hw-8-add.gif?token=AGBgxkNAayFg9MlSshoxhzATnBN5g1q0ks5aGF_MwA%3D%3D)

### Validations! (Extra credit)

1. Form Validation:  Users should not be able to post requests for adding restaurants if any of the form fields are empty
2. Duplicate check: Users should not be able to save duplicated entries to the database

</div>

</div>
